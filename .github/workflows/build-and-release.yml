name: Build and Release Spot Extension & Configurator

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:

jobs:
  build_spx:
    name: Build Spot Extension (.spx)
    runs-on: ubuntu-latest
    outputs:
      ext_name: ${{ steps.get_ext_name.outputs.ext_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (arm64)
        run: |
          docker buildx build --platform linux/arm64 -t doodle_battery_service:latest --load .

      - name: Save Docker image to tar
        run: |
          docker save doodle_battery_service:latest | gzip > doodle_battery_service.tgz

      - name: Get extension name from manifest.json
        id: get_ext_name
        run: |
          echo "ext_name=$(jq -r .extension_name manifest.json)" >> $GITHUB_OUTPUT

      - name: Create Spot Extension (.spx) file
        run: |
          tar zcfv "${{ steps.get_ext_name.outputs.ext_name }}.spx" doodle_battery_service.tgz docker-compose.yml manifest.json

      - name: Upload .spx as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spot-extension
          path: ${{ steps.get_ext_name.outputs.ext_name }}.spx

  build_exe:
    name: Build Configurator Executable and Bundle ZIP
    needs: build_spx
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller paramiko

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed core_io_doodle_configurator.py

      - name: Download SPX artifact
        uses: actions/download-artifact@v4
        with:
          name: spot-extension
          path: .

      - name: Copy PDF guide
        run: |
          cp docs/core_io_doodle_setup_guide.pdf .

      - name: Prepare ZIP contents
        id: zipinfo
        run: |
          # Set platform-specific executable name
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # EXE="dist/core_io_doodle_configurator.exe"
            EXE="dist/**"
            ZIP="doodle_battery_bundle-windows.zip"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # EXE="dist/core_io_doodle_configurator"
            EXE="dist/**"
            ZIP="doodle_battery_bundle-macos.zip"
          else
            # EXE="dist/core_io_doodle_configurator"
            EXE="dist/**"
            ZIP="doodle_battery_bundle-linux.zip"
          fi
          echo "EXE=$EXE" >> $GITHUB_OUTPUT
          echo "ZIP=$ZIP" >> $GITHUB_OUTPUT

      - name: Create ZIP bundle
        run: |
          zip "${{ steps.zipinfo.outputs.ZIP }}" "${{ steps.zipinfo.outputs.EXE }}" *.spx core_io_doodle_setup_guide.pdf

      - name: Upload ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zipinfo.outputs.ZIP }}
          path: ${{ steps.zipinfo.outputs.ZIP }}

  release:
    name: Create Release and Upload Bundles
    needs: [build_spx, build_exe]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows ZIP
        uses: actions/download-artifact@v4
        with:
          name: doodle_battery_bundle-windows.zip
          path: artifacts/

      - name: Download Mac ZIP
        uses: actions/download-artifact@v4
        with:
          name: doodle_battery_bundle-macos.zip
          path: artifacts/

      - name: Download Linux ZIP
        uses: actions/download-artifact@v4
        with:
          name: doodle_battery_bundle-linux.zip
          path: artifacts/

      - name: Create GitHub Release and upload all bundles
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
